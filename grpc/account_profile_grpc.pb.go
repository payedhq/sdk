// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: api/grpc/account_profile.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountProfileClient is the client API for AccountProfile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountProfileClient interface {
	ProfileToProfileTransfer(ctx context.Context, in *DebitAccountProfileRequest, opts ...grpc.CallOption) (*DebitAccountProfileResponse, error)
	FetchProfileToProfileTransferByReference(ctx context.Context, in *FetchTransferByReferenceRequest, opts ...grpc.CallOption) (*DebitAccountProfileResponse, error)
	ValidateAccessTokenForProfile(ctx context.Context, in *ValidateAccessTokenForProfileRequest, opts ...grpc.CallOption) (*ValidateAccessTokenForProfileResponse, error)
	FetchProfileBalance(ctx context.Context, in *FetchProfileBalanceRequest, opts ...grpc.CallOption) (*FetchProfileBalanceResponse, error)
	NotifyProfile(ctx context.Context, in *NotifyProfileRequest, opts ...grpc.CallOption) (*NotifyProfileResponse, error)
}

type accountProfileClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountProfileClient(cc grpc.ClientConnInterface) AccountProfileClient {
	return &accountProfileClient{cc}
}

func (c *accountProfileClient) ProfileToProfileTransfer(ctx context.Context, in *DebitAccountProfileRequest, opts ...grpc.CallOption) (*DebitAccountProfileResponse, error) {
	out := new(DebitAccountProfileResponse)
	err := c.cc.Invoke(ctx, "/payed_grpc.account_profiles.AccountProfile/ProfileToProfileTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProfileClient) FetchProfileToProfileTransferByReference(ctx context.Context, in *FetchTransferByReferenceRequest, opts ...grpc.CallOption) (*DebitAccountProfileResponse, error) {
	out := new(DebitAccountProfileResponse)
	err := c.cc.Invoke(ctx, "/payed_grpc.account_profiles.AccountProfile/FetchProfileToProfileTransferByReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProfileClient) ValidateAccessTokenForProfile(ctx context.Context, in *ValidateAccessTokenForProfileRequest, opts ...grpc.CallOption) (*ValidateAccessTokenForProfileResponse, error) {
	out := new(ValidateAccessTokenForProfileResponse)
	err := c.cc.Invoke(ctx, "/payed_grpc.account_profiles.AccountProfile/ValidateAccessTokenForProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProfileClient) FetchProfileBalance(ctx context.Context, in *FetchProfileBalanceRequest, opts ...grpc.CallOption) (*FetchProfileBalanceResponse, error) {
	out := new(FetchProfileBalanceResponse)
	err := c.cc.Invoke(ctx, "/payed_grpc.account_profiles.AccountProfile/FetchProfileBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountProfileClient) NotifyProfile(ctx context.Context, in *NotifyProfileRequest, opts ...grpc.CallOption) (*NotifyProfileResponse, error) {
	out := new(NotifyProfileResponse)
	err := c.cc.Invoke(ctx, "/payed_grpc.account_profiles.AccountProfile/NotifyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountProfileServer is the server API for AccountProfile service.
// All implementations must embed UnimplementedAccountProfileServer
// for forward compatibility
type AccountProfileServer interface {
	ProfileToProfileTransfer(context.Context, *DebitAccountProfileRequest) (*DebitAccountProfileResponse, error)
	FetchProfileToProfileTransferByReference(context.Context, *FetchTransferByReferenceRequest) (*DebitAccountProfileResponse, error)
	ValidateAccessTokenForProfile(context.Context, *ValidateAccessTokenForProfileRequest) (*ValidateAccessTokenForProfileResponse, error)
	FetchProfileBalance(context.Context, *FetchProfileBalanceRequest) (*FetchProfileBalanceResponse, error)
	NotifyProfile(context.Context, *NotifyProfileRequest) (*NotifyProfileResponse, error)
	mustEmbedUnimplementedAccountProfileServer()
}

// UnimplementedAccountProfileServer must be embedded to have forward compatible implementations.
type UnimplementedAccountProfileServer struct {
}

func (UnimplementedAccountProfileServer) ProfileToProfileTransfer(context.Context, *DebitAccountProfileRequest) (*DebitAccountProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileToProfileTransfer not implemented")
}
func (UnimplementedAccountProfileServer) FetchProfileToProfileTransferByReference(context.Context, *FetchTransferByReferenceRequest) (*DebitAccountProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProfileToProfileTransferByReference not implemented")
}
func (UnimplementedAccountProfileServer) ValidateAccessTokenForProfile(context.Context, *ValidateAccessTokenForProfileRequest) (*ValidateAccessTokenForProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAccessTokenForProfile not implemented")
}
func (UnimplementedAccountProfileServer) FetchProfileBalance(context.Context, *FetchProfileBalanceRequest) (*FetchProfileBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProfileBalance not implemented")
}
func (UnimplementedAccountProfileServer) NotifyProfile(context.Context, *NotifyProfileRequest) (*NotifyProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyProfile not implemented")
}
func (UnimplementedAccountProfileServer) mustEmbedUnimplementedAccountProfileServer() {}

// UnsafeAccountProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountProfileServer will
// result in compilation errors.
type UnsafeAccountProfileServer interface {
	mustEmbedUnimplementedAccountProfileServer()
}

func RegisterAccountProfileServer(s grpc.ServiceRegistrar, srv AccountProfileServer) {
	s.RegisterService(&AccountProfile_ServiceDesc, srv)
}

func _AccountProfile_ProfileToProfileTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebitAccountProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProfileServer).ProfileToProfileTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payed_grpc.account_profiles.AccountProfile/ProfileToProfileTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProfileServer).ProfileToProfileTransfer(ctx, req.(*DebitAccountProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProfile_FetchProfileToProfileTransferByReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTransferByReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProfileServer).FetchProfileToProfileTransferByReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payed_grpc.account_profiles.AccountProfile/FetchProfileToProfileTransferByReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProfileServer).FetchProfileToProfileTransferByReference(ctx, req.(*FetchTransferByReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProfile_ValidateAccessTokenForProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAccessTokenForProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProfileServer).ValidateAccessTokenForProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payed_grpc.account_profiles.AccountProfile/ValidateAccessTokenForProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProfileServer).ValidateAccessTokenForProfile(ctx, req.(*ValidateAccessTokenForProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProfile_FetchProfileBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProfileBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProfileServer).FetchProfileBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payed_grpc.account_profiles.AccountProfile/FetchProfileBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProfileServer).FetchProfileBalance(ctx, req.(*FetchProfileBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountProfile_NotifyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountProfileServer).NotifyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payed_grpc.account_profiles.AccountProfile/NotifyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountProfileServer).NotifyProfile(ctx, req.(*NotifyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountProfile_ServiceDesc is the grpc.ServiceDesc for AccountProfile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountProfile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payed_grpc.account_profiles.AccountProfile",
	HandlerType: (*AccountProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProfileToProfileTransfer",
			Handler:    _AccountProfile_ProfileToProfileTransfer_Handler,
		},
		{
			MethodName: "FetchProfileToProfileTransferByReference",
			Handler:    _AccountProfile_FetchProfileToProfileTransferByReference_Handler,
		},
		{
			MethodName: "ValidateAccessTokenForProfile",
			Handler:    _AccountProfile_ValidateAccessTokenForProfile_Handler,
		},
		{
			MethodName: "FetchProfileBalance",
			Handler:    _AccountProfile_FetchProfileBalance_Handler,
		},
		{
			MethodName: "NotifyProfile",
			Handler:    _AccountProfile_NotifyProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/account_profile.proto",
}
